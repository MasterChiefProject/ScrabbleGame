package test;

import test.Tile.Bag;

public class MainTrain {

	public static void testBag() {
		// Scanner IN_WAIT = new Scanner(System.in);

		Bag b = Tile.Bag.getBag();
		Bag b1 = Tile.Bag.getBag();
		if (b1 != b)
			System.out.println("your Bag in not a Singleton (-5)");

		// IN_WAIT.nextLine();

		int[] q0 = b.getQuantities();
		q0[0] += 1;
		int[] q1 = b.getQuantities();
		if (q0[0] != q1[0] + 1)
			System.out.println("getQuantities did not return a clone (-5)");

		// IN_WAIT.nextLine();

		for (int k = 0; k < 9; k++) {
			int[] qs = b.getQuantities();
			// System.out.println(Arrays.toString(qs));
			Tile t = b.getRand();
			int i = t.letter - 'A';
			int[] qs1 = b.getQuantities();
			if (qs1[i] != qs[i] - 1)
				System.out.println("problem with getRand (-1)");

			// IN_WAIT.nextLine();

			b.put(t);
			b.put(t);
			b.put(t);

			if (b.getQuantities()[i] != qs[i])
				System.out.println("problem with put (-1)");

			// IN_WAIT.nextLine();
		}

		if (b.getTile('a') != null || b.getTile('$') != null || b.getTile('A') == null)
			System.out.println("your getTile is wrong (-2)");

		// IN_WAIT.nextLine();
		// IN_WAIT.close();
	}

	private static Tile[] get(String s) {
		Tile[] ts = new Tile[s.length()];
		int i = 0;
		for (char c : s.toCharArray()) {
			ts[i] = Bag.getBag().getTile(c);
			i++;
		}
		return ts;
	}

	public static void testBoard() {
		Board b = Board.getBoard();
		if (b != Board.getBoard())
			System.out.println("board should be a Singleton (-5)");

		Bag bag = Bag.getBag();
		Tile[] ts = new Tile[10];
		for (int i = 0; i < ts.length; i++) {
			ts[i] = bag.getRand();
			// System.out.printf("tile : %s\n", ts[i].getLetter());
		}

		Word w0 = new Word(ts, 0, 6, true);
		Word w1 = new Word(ts, 7, 6, false);
		Word w2 = new Word(ts, 6, 7, true);
		Word w3 = new Word(ts, -1, 7, true);
		Word w4 = new Word(ts, 7, -1, false);
		Word w5 = new Word(ts, 0, 7, true);
		Word w6 = new Word(ts, 7, 0, false);

		// System.out.printf("Word : %s\n", w0.getTiles()[0].getLetter());
		// System.out.printf("Word : %s\n", w1.getTiles()[1].getLetter());
		// System.out.printf("Word : %s\n", w2.getTiles()[2].getLetter());
		// System.out.printf("Word : %s\n", w3.getTiles()[3].getLetter());
		// System.out.printf("Word : %s\n", w4.getTiles()[4].getLetter());
		// System.out.printf("Word : %s\n", w5.getTiles()[5].getLetter());
		// System.out.printf("Word : %s\n", w6.getTiles()[6].getLetter());

		if (b.boardLegal(w0) || b.boardLegal(w1) || b.boardLegal(w2) ||
				b.boardLegal(w3) || b.boardLegal(w4) || !b.boardLegal(w5) ||
				!b.boardLegal(w6))
			System.out.println("your boardLegal function is wrong (-10)");

		for (Tile t : ts)
			bag.put(t);

		int score = 0;
		Word horn = new Word(get("HORN"), 7, 5, false);
		score = b.tryPlaceWord(horn);
		if (score != 14)
			System.out.printf("problem in placeWord for 1st word (-10) [returned score: %d]\n", score);

		Word farm = new Word(get("FA_M"), 5, 7, true);
		score = b.tryPlaceWord(farm);
		if (score != 9)
			System.out.printf("problem in placeWord for 2ed word (-10) [returned score: %d]\n", score);

		Word paste = new Word(get("PASTE"), 9, 5, false);
		score = b.tryPlaceWord(paste);
		if (score != 25)
			System.out.printf("problem in placeWord for 3ed word (-10) [returned score: %d]\n", score);

		Word mob = new Word(get("_OB"), 8, 7, false);
		score = b.tryPlaceWord(mob);
		if (score != 18)
			System.out.printf("problem in placeWord for 4th word (-10) [returned score: %d]\n", score);

		Word bit = new Word(get("BIT"), 10, 4, false);
		score = b.tryPlaceWord(bit);
		if (score != 22)
			System.out.printf("problem in placeWord for 5th word (-15) [returned score: %d]\n", score);

		Word test1 = new Word(get("FUN"), 11, 4, false);
		score = b.tryPlaceWord(test1);
		if (score > -1)
			System.out.printf("[my own test, returned score: %d]\n", score);
	}

	public static void main(String[] args) {
		testBag(); // 30 points
		testBoard(); // 70 points
		System.out.println("done");
	}

}
